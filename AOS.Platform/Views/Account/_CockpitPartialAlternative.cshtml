@model AOS.Platform.Models.CockpitViewModel
@{
    ViewBag.Title = "Cockpit";
}

@*<div class="row" style="font-size: 8pt">
    <div class="col-md-3">
        Connection: <span class="@Model.CurrentConnectionStatusIcon" id="connStatus"></span>&nbsp;<span id="connStatusText" class="adwiza-label">@Model.CurrentConnectionStatus</span></strong></p>&nbsp;<div id="ajaxloader-cockpit" hidden="hidden"><img src="~/Content/Images/ajax-loader-cockpit.gif" style="width:40px" alt="ALT NAME"></div>
    </div>
    <div class="col-md-3" style="text-align:right">
        Role: <p class="adwiza-label" style="display: inline-block">@Model.CurrentAccountRole</p>
    </div>
    <div class="col-md-3" style="float: right">
        @Html.DropDownListFor(m => m.CurrentAccountId, new SelectList(Model.AccountsList, "AccountID", "Name"), new { @class = "form-control input-xs", id = "selection", @onchange = "ChangeAccount(this.value)" })
    </div>
</div>*@
@*<div class="form-group"><hr /></div>
    <div class="form-group">Role:<br /><p class="adwiza-label">@Model.CurrentAccountRole</p></div>
    <div class="form-group"><hr /></div>

    @{
        <div class="form-group">
            <div class="row">
                <div class="col-md-10">
                    Connection:<br /><p class="adwiza-label"><strong><span class="@Model.CurrentConnectionStatusIcon" id="connStatus"></span>&nbsp;<span id="connStatusText">@Model.CurrentConnectionStatus</span></strong></p>
                </div>
                <div class="col-md-2">
                    <br />
                    <div id="ajaxloader-cockpit" hidden="hidden"><img src="~/Content/Images/ajax-loader-cockpit.gif" style="width:40px" alt="ALT NAME"></div>
                </div>
            </div>
        </div>
        <div class="form-group" style="overflow:hidden">
            @if (Model.CurrentAccountRole.ToLower() == "user" || Model.IsSOOnline)
            {
                <button class="btn btn-default" id="btnconnectionsettings" disabled="disabled" style="float:left" onclick="location.href='@Url.Action("Endpoint", "Account")'">
                    <span class="fa fa-wrench" id="connectionSettings"></span>&nbsp;Change settings
                </button>
            }
            else
            {
                <button class="btn btn-default" id="btnconnectionsettings" style="float:left" onclick="location.href='@Url.Action("Endpoint", "Account")'">
                    <span class="fa fa-wrench" id="connectionSettings"></span>&nbsp;Change settings
                </button>
            }
        </div>
        <div class="form-group"><hr /></div>
    }

    @{
        var accountOwner = (Model.CurrentAccountOwnerName == null) ? Model.CurrentAccountOwnerEmail : Model.CurrentAccountOwnerName;
    }
    <div class="form-group">Account owner:<br /><p class="adwiza-label"><strong>@accountOwner</strong></p></div>
    <div class="form-group" style="overflow:hidden">
        <a target="_top" class="btn btn-default" style="float:left" href="mailto:@Model.CurrentAccountOwnerEmail">
            <span class="fa fa-envelope-o" id="connectionSettings"></span>&nbsp;Contact
        </a>
    </div>*@
</div>
<script>
    // Change selection dropdown
    function ChangeAccount(val) {

        var url = '@Url.Action("ChangeAccount", "Account", new { accountId = "__id__" })';
        window.location.href = url.replace('__id__', val);

        //$.get(url, { accountId: val }, function(data) {
        //    //$("#reverseTheString").html(data);
        //});
    };

    $("a[href^='mailto:']").on("click",function() {
        window.top.location = $(this).prop("href");
        return false;
    });

    // Change selection dropdown
    var ajaxIntervalCall = function CheckEndpoint() {
        $("#ajaxloader-cockpit").show();

        var url = "@Url.Action("CheckEndpoint", "Account")";
        var data = $("#selection").val();

        // Assign handlers immediately after making the request,
        // and remember the jqxhr object for this request
        var jqxhr = $.getJSON(url, { accountName: data }, function (resp) {
            if (resp.IsOK) {
                var obj = jQuery.parseJSON( resp.ReturnedJsonData );
                console.log(obj.CurrentConnectionStatusIcon);
                console.log(obj.CurrentConnectionStatus);
                $("#connStatus").attr('class', obj.CurrentConnectionStatusIcon);
                //$("#connStatus").val(obj.CurrentConnectionStatusIcon);
                $("#connStatusText").text(obj.CurrentConnectionStatus);
            }
            //console.log("success");
            $("#ajaxloader-cockpit").hide();
        })
          .done(function () {
              //console.log("second success");
          })
          .fail(function () {
              //console.log("error");
          })
          .always(function () {
              //console.log("complete");
          });
    };

    // Toggle Administrator button depending on role
    $(document).ready(function () {

        if ("@Model.EndpointPollingEnabled" == "True") {
            var interval = @Model.EndpointPollingInterval;
            setInterval(ajaxIntervalCall, interval);
        };

        var btnGroupTop = $("#btnGroupTop");
        var btnLogoff = $("#btnLogoff");
        var btnAccountSettings = $("#btnaccountsettings");
        var btnReferrals = $("#btnreferrals");
        var btnConnectionSettings = $("#btnconnectionsettings");

        var role = @{@Html.Raw(Json.Encode(@Model.CurrentAccountRole));};

        if (role.toLowerCase() == "system user") {
            btnGroupTop.show();
            btnLogoff.hide();
        }
        else {
            btnGroupTop.hide();
            btnLogoff.show();
        }

        if (role.toLowerCase() == "user") {
            btnAccountSettings.hide();
            btnReferrals.hide();
        }
    });
</script>