<!-- Modal Dialog -->
<div class="modal fade" id="testendpoint" role="dialog" aria-labelledby="confirmDeleteLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            @*<div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                <h4 class="modal-title">Testing endpoint</h4>
            </div>*@
            <div class="modal-body">
                <div style="height:200px">
                    <span id="searching_spinner_center" style="position: absolute;display: block;top: 50%;left: 50%;"></span>
                </div>
                <div style="text-align: center">Testing endpoint...</div>
            </div>
            <div class="form-group">
                <div class="alert alert-success" role="alert" id="te-success-alert"></div>
            </div>
            <div class="form-group">
                <div class="alert alert-danger" role="alert" id="te-error-alert"></div>
            </div>
        </div>
    </div>
</div>
<!-- Dialog show event handler -->
<script type="text/javascript">

    var opts = {
        lines: 13, // The number of lines to draw
        length: 20, // The length of each line
        width: 10, // The line thickness
        radius: 30, // The radius of the inner circle
        corners: 1, // Corner roundness (0..1)
        rotate: 0, // The rotation offset
        direction: 1, // 1: clockwise, -1: counterclockwise
        color: '#000', // #rgb or #rrggbb or array of colors
        speed: 1, // Rounds per second
        trail: 60, // Afterglow percentage
        shadow: false, // Whether to render a shadow
        hwaccel: false, // Whether to use hardware acceleration
        className: 'spinner', // The CSS class to assign to the spinner
        zIndex: 2e9, // The z-index (defaults to 2000000000)
        top: 'auto', // Top position relative to parent in px
        left: 'auto' // Left position relative to parent in px
    };

    var target = document.getElementById('searching_spinner_center');
    var spinner = new Spinner(opts).spin(target);

    $('#testendpoint').on('show.bs.modal', function (e) {

        // Get data-message attr from trigging button
        $message = $(e.relatedTarget).attr('data-message');
        $title = $(e.relatedTarget).attr('data-title');

        var url = "@Url.Action("CheckEndpoint", "Account")";
        var accountname = $message;

        // Assign handlers immediately after making the request,
        // and remember the jqxhr object for this request
        var jqxhr = $.getJSON(url, { accountName: accountname }, function (resp) {

            // Deserialize returned JSON data to get connection status text and icon
            var obj = jQuery.parseJSON(resp.ReturnedJsonData);
            $("#connStatus").attr('class', obj.CurrentConnectionStatusIcon);
            $("#connStatusText").text(obj.CurrentConnectionStatus);

            if (resp.IsOK) {
                // If we have a connection and everything is OK, then show the green success-alert panel
                if (obj.StatusAsInt == 1) {
                    // Show success alert box
                    $("#te-success-alert").html("<div style='text-align: center'>" + obj.CurrentConnectionStatus + "</div>");
                    $("#te-success-alert").show();
                    // Remove success alert-box after a few seconds
                    $("#te-success-alert").fadeTo(3000, 500).slideUp(500, function () {
                        $("#te-success-alert").hide();
                        $('#testendpoint').modal('hide')
                    });
                }
                else {
                    // Show error alert box
                    $("#te-error-alert").html("<div style='text-align: center'>" + obj.CurrentConnectionStatus + "</div>");
                    $("#te-error-alert").show();
                    // Remove error alert-box after a few seconds
                    $("#te-error-alert").fadeTo(3000, 500).slideUp(500, function () {
                        $("#te-error-alert").hide();
                        $('#testendpoint').modal('hide')
                    });

                }

            }
            else {
                // Show error alert box
                $("#te-error-alert").html("<div style='text-align: center'>" + obj.CurrentConnectionStatus + "</div>");
                $("#te-error-alert").show();
                // Remove error alert-box after a few seconds
                $("#te-error-alert").fadeTo(3000, 500).slideUp(500, function () {
                    $("#te-error-alert").hide();
                    $('#testendpoint').modal('hide')
                });
            }

            console.log("error");
        })
          .done(function () {
              console.log("second success");
          })
          .fail(function () {
              console.log("error");
          })
          .always(function () {
              console.log("complete");
          });

        $(this).find('.modal-title').text($title);
    });

    // Form confirm (yes/ok) handler, submits form
    $('#testendpoint').find('.modal-footer #confirm').on('click', function () {
        var url = $("#redirectUrl").text();
        window.location.href = url;
    });

    $(function () {
        $("#te-success-alert").hide();
        $("#te-error-alert").hide();

    });

</script>